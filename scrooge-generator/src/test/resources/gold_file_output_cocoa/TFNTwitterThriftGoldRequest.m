/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
#import <Foundation/Foundation.h>

#import "ApacheThrift/TApplicationException.h"
#import "ApacheThrift/TBase.h"
#import "ApacheThrift/TObjective-C.h"
#import "ApacheThrift/TProcessor.h"
#import "ApacheThrift/TProtocol.h"
#import "ApacheThrift/TProtocolException.h"
#import "ApacheThrift/TProtocolUtil.h"
#import "TFNTwitterThriftGoldRequest.h"

@implementation TFNTwitterThriftGoldRequest

- (NSString*)description
{
    NSMutableString* ms = [NSMutableString stringWithString:@"TFNTwitterThriftGoldRequest( "];
    [ms appendString:@"aList:"];
    [ms appendFormat:@"%@ ", _aList];
    [ms appendString:@"aSet:"];
    [ms appendFormat:@"%@ ", _aSet];
    [ms appendString:@"aMap:"];
    [ms appendFormat:@"%@ ", _aMap];
    [ms appendString:@")"];
    return [NSString stringWithString:ms];
}

- (instancetype)initWithAList:(NSArray *)aList aSet:(NSSet *)aSet aMap:(NSDictionary *)aMap
{
    if (self = [super init]) {
        [self setAList:aList];
        [self setASet:aSet];
        [self setAMap:aMap];
    }

    return self;
}

- (instancetype)initWithCoder:(NSCoder*)decoder
{
    if (self = [super init]) {
        if ([decoder containsValueForKey:@"1"]) {
            [self setAList:[decoder decodeObjectForKey:@"1"]];
        }
        if ([decoder containsValueForKey:@"2"]) {
            [self setASet:[decoder decodeObjectForKey:@"2"]];
        }
        if ([decoder containsValueForKey:@"3"]) {
            [self setAMap:[decoder decodeObjectForKey:@"3"]];
        }
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder*)encoder
{
    if (_aListIsSet) {
        [encoder encodeObject:_aList forKey:@"1"];
    }
    if (_aSetIsSet) {
        [encoder encodeObject:_aSet forKey:@"2"];
    }
    if (_aMapIsSet) {
        [encoder encodeObject:_aMap forKey:@"3"];
    }
}

- (void)setAList:(NSArray *)aList
{
    _aList = [aList copy];
    _aListIsSet = YES;
}

- (void)setASet:(NSSet *)aSet
{
    _aSet = [aSet copy];
    _aSetIsSet = YES;
}

- (void)setAMap:(NSDictionary *)aMap
{
    _aMap = [aMap copy];
    _aMapIsSet = YES;
}

- (void)read:(id <TProtocol>)inProtocol
{
    NSString* fieldName;
    int fieldType;
    int fieldID;

    [inProtocol readStructBeginReturningName:nil];
    while (true) {
        [inProtocol readFieldBeginReturningName:&fieldName type:&fieldType fieldID:&fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID) {
            case 1:
                if (fieldType == TType_LIST) {
                    NSArray * aList_item;
                    int _aList_item_size;
                    [inProtocol readListBeginReturningElementType:NULL size:&_aList_item_size];
                    NSMutableArray *aList_item_mutable = [[NSMutableArray alloc] initWithCapacity:_aList_item_size];
                    for (int _aList_item_i = 0; _aList_item_i < _aList_item_size; ++_aList_item_i) {
                        NSString * aList_item_element;
                        aList_item_element = [inProtocol readString];
                        [aList_item_mutable addObject: aList_item_element];
                    }
                    aList_item = aList_item_mutable;
                    [inProtocol readListEnd];
                    [self setAList:aList_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_SET) {
                    NSSet * aSet_item;
                    int _aSet_item_size;
                    [inProtocol readSetBeginReturningElementType: NULL size: &_aSet_item_size];
                    NSMutableSet *aSet_item_mutable = [[NSMutableSet alloc] initWithCapacity:_aSet_item_size];
                    for (int _aSet_item_i = 0; _aSet_item_i < _aSet_item_size; ++_aSet_item_i) {
                        int32_t aSet_item_element;
                        aSet_item_element = [inProtocol readI32];
                        [aSet_item_mutable addObject: aSet_item_element];
                    }
                    aSet_item = aSet_item_mutable;
                    [inProtocol readSetEnd];
                    [self setASet:aSet_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_MAP) {
                    NSDictionary * aMap_item;
                    int _aMap_item_size;
                    [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_aMap_item_size];
                    NSMutableDictionary *aMap_item_mutable = [[NSMutableDictionary alloc] initWithCapacity: _aMap_item_size];
                    for (int _aMap_item_i = 0; _aMap_item_i < _aMap_item_size; ++_aMap_item_i) {
                        int64_t aMap_item_key;
                        int64_t aMap_item_value;
                        aMap_item_key = [inProtocol readI64];
                        aMap_item_value = [inProtocol readI64];
                        [aMap_item_mutable setObject:aMap_item_value forKey:@(aMap_item_key)];
                    }
                    aMap_item = aMap_item_mutable;
                    [inProtocol readMapEnd];
                    [self setAMap:aMap_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
        default:
            NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
            [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
            break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
    [self validate];
}

- (void)write:(id <TProtocol>)outProtocol
{
    [self validate];
    [outProtocol writeStructBeginWithName:@"TFNTwitterThriftGoldRequest"];
    if (_aListIsSet) {
        [outProtocol writeFieldBeginWithName:@"aList" type:TType_LIST fieldID:1];
        NSArray * aList_item = _aList;
        [outProtocol writeListBeginWithElementType:TType_STRING size:(int)[aList_item count]];
        for (int _aList_item_i = 0; _aList_item_i < [aList_item count]; _aList_item_i++) {
            NSString * aList_item_element = aList_item[_aList_item_i];
            [outProtocol writeString:aList_item_element];
        }
        [outProtocol writeListEnd];
        [outProtocol writeFieldEnd];
    }
    if (_aSetIsSet) {
        [outProtocol writeFieldBeginWithName:@"aSet" type:TType_SET fieldID:2];
        NSSet * aSet_item = _aSet;
        [outProtocol writeSetBeginWithElementType:TType_I32 size:(int)[aSet_item count]];
        for (id aSet_item_element in aSet_item) {
            [outProtocol writeI32:aSet_item_element];
        }
        [outProtocol writeSetEnd];
        [outProtocol writeFieldEnd];
    }
    if (_aMapIsSet) {
        [outProtocol writeFieldBeginWithName:@"aMap" type:TType_MAP fieldID:3];
        NSDictionary * aMap_item = _aMap;
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_I64 size: (int)[aMap_item count]];
        for (id aMap_item_key_id in aMap_item) {
            int64_t aMap_item_key;
            int64_t aMap_item_value;
            id aMap_item_value_id = [aMap_item objectForKey:aMap_item_key_id];
            aMap_item_key = [aMap_item_key_id longLongValue];
            aMap_item_value = [aMap_item_value_id longLongValue];
            [outProtocol writeI64:aMap_item_key];
            [outProtocol writeI64:aMap_item_value];
        }
        [outProtocol writeMapEnd];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (void)validate
{
}

@end
