package com.twitter.scrooge
package scalagen

import AST._

trait ScalaTemplate {
  val paths = List(
    "com.twitter.scrooge",
    "com.twitter.scrooge.scalagen",
    "com.twitter.scrooge.scalagen.ReaderTemplate"
  )
  def template[A: Manifest](text: String) = Template[A](text, paths)
}

object ScalaGenerator extends ScalaTemplate {
  val header =
"""/**
 * Autogenerated by Scrooge
 * Edit this shit, I dare you.
 */

package {{scalaNamespace}}

import scala.collection._
"""

  val enumTemplateText =
header + """import org.apache.thrift.TEnum

object {{name}} {
{{values.map { v => "case object " + v.name + " extends " + name + "(" + v.value + ")"}.indent}}

  def apply(value: Int): Option[{{name}}] = {
    value match {
{{values.map { v => "case " + v.value + " => Some(" + v.name + ")"}.indent(3)}}
      case _ => None
    }
  }
}

abstract class {{name}}(val value: Int) {
  def toThrift = new TEnum {
    override def getValue = {
      value
    }
  }
}"""

  val constsTemplateText =
header + """object Constants {
{{constList.map { e => constTemplate(e, scope) }.indent}}
}
"""

  val constTemplateText = "val {{name}}: {{scalaType(`type`)}} = {{constantTemplate(`type`, value)}}"


  // ----- writers

  val writeBasicTemplateText = """oprot.{{protocolWriteMethod(self)}}(_item)"""

  val writeBinaryTemplateText = """oprot.writeBinary(ByteBuffer.wrap(_item))"""

  val writeListTemplateText =
"""oprot.writeListBegin(new TList(TType.{{constType(self.asInstanceOf[AST.ListType].tpe)}}, _item.size))
_item.foreach { _item =>
{{ val t = self.asInstanceOf[AST.ListType].tpe; writeTemplate(t)(t, scope).indent(1) }}
}
oprot.writeListEnd()
"""

  val writeSetTemplateText =
"""oprot.writeSetBegin(new TSet(TType.{{constType(self.asInstanceOf[AST.SetType].tpe)}}, _item.size))
_item.foreach { _item =>
{{ val t = self.asInstanceOf[AST.SetType].tpe; writeTemplate(t)(t, scope).indent(1) }}
}
oprot.writeSetEnd()
"""

  val writeMapTemplateText =
"""oprot.writeMapBegin(new TMap(TType.{{constType(self.asInstanceOf[AST.MapType].keyType)}}, TType.{{constType(self.asInstanceOf[AST.MapType].valueType)}}, _item.size))
_item.foreach { case (_key, _value) =>
  {
    val _item = _key
{{ val t = self.asInstanceOf[AST.MapType].keyType; writeTemplate(t)(t, scope).indent(2) }}
  }
  {
    val _item = _value
{{ val t = self.asInstanceOf[AST.MapType].valueType; writeTemplate(t)(t, scope).indent(2) }}
  }
}
oprot.writeMapEnd()
"""

  val writeStructTemplateText = """_item.write(oprot)"""

  val writeFieldTemplateText =
"""if ({{
if (requiredness == AST.Requiredness.Optional && default == None) {
  name + ".isDefined"
} else {
  `type` match {
    case AST.TBool | AST.TByte | AST.TI16 | AST.TI32 | AST.TI64 | AST.TDouble =>
      "true"
    case _ =>
      name + " ne null"
  }
}
}}) {
  val _item = {{name}}{{if (requiredness == AST.Requiredness.Optional && default == None) ".get" else ""}}
  oprot.writeFieldBegin({{ writeFieldConst(name) }})
{{ writeTemplate(`type`)(`type`, scope).indent(1) }}
  oprot.writeFieldEnd()
}
"""

  val structTemplateText =
header + """import java.nio.ByteBuffer
import org.apache.thrift.protocol._
import com.twitter.scrooge.ThriftStruct

object {{name}} {
  object decoder extends (TProtocol => ThriftStruct) {
    override def apply(_iprot: TProtocol) = {
      var _field: TField = null
{{ fields.map { f => "var " + f.name + ": " + scalaFieldType(f) + " = " + defaultValueTemplate(f) }.indent(3) }}
{{ fields.filter { _.requiredness == AST.Requiredness.Required }.map { f => "var _got_" + f.name + " = false" }.indent(3) }}

      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        _field = _iprot.readFieldBegin
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
{{ fields.map { f => readFieldTemplate(f, scope) }.indent(6) }}
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
{{
fields.filter { _.requiredness == AST.Requiredness.Required }.map { f =>
  "if (!_got_" + f.name + ") throw new TProtocolException(\"Required field '" + f.name + "' was not found in serialized data for struct " + name + "\")"
}.indent(3)
}}
      new {{name}}({{ fields.map { f => f.name }.mkString(", ") }})
    }
  }
}

case class {{name}}({{fields.map { f => f.name + ": " + scalaFieldType(f) }.mkString(", ")}}) extends ThriftStruct {
  private val STRUCT_DESC = new TStruct("{{name}}")
{{fields.map { f => "private val " + writeFieldConst(f.name) + " = new TField(\"" + f.name + "\", TType." + constType(f.`type`) + ", " + f.id.toString + ")"}.indent}}

  override def write(oprot: TProtocol) {
    validate()

    oprot.writeStructBegin(STRUCT_DESC)
{{ fields.map { f => writeFieldTemplate(f, scope) }.indent(2) }}
    oprot.writeFieldStop()
    oprot.writeStructEnd()
  }

  def validate() = true //TODO: Implement this
}"""

  case class ScalaService(scalaNamespace: String, javaNamespace: String, service: Service)
  case class ConstList(constList: Array[Const])
}

// maybe should eventually go elsewhere.
class ScalaGenerator extends Generator {
  import ScalaGenerator._

  var scalaNamespace: String = null
  var javaNamespace: String = null

  val enumTemplate = Template[Enum](enumTemplateText)
  val constsTemplate = Template[ConstList](constsTemplateText)
  val constTemplate = Template[Const](constTemplateText)
  val structTemplate = template[Struct](structTemplateText)

  // writers
  val writeBasicTemplate = template[FieldType](writeBasicTemplateText)
  val writeBinaryTemplate = template[FieldType](writeBinaryTemplateText)
  val writeListTemplate = template[FieldType](writeListTemplateText)
  val writeSetTemplate = template[FieldType](writeSetTemplateText)
  val writeMapTemplate = template[FieldType](writeMapTemplateText)
  val writeStructTemplate = template[FieldType](writeStructTemplateText)
  val writeFieldTemplate = template[Field](writeFieldTemplateText)

  // Constants
  val stringTemplate = Template[StringConstant](""""{{value}}"""")
  val doubleTemplate = Template[DoubleConstant]("{{value.toString}}")
  val intTemplate = Template[IntConstant]("{{value.toString}}")
  val listTemplate = Template[ListConstant](
    """List({{elems.map { e => constantTemplate(null, e) }.mkString(", ")}})"""
  )
  val mapTemplate =  Template[MapConstant](
    """Map({{elems.asInstanceOf[Map[com.twitter.scrooge.AST.Constant, com.twitter.scrooge.AST.Constant]].map { case (x, y) => constantTemplate(null, x) + " -> " + constantTemplate(null, y) }.mkString(",\n")}})"""
  )

  def constantTemplate(`type`: FieldType, constant: Constant): String = {
    constant match {
      case c @ StringConstant(_) =>
        stringTemplate(c, this)
      case c @ DoubleConstant(_) =>
        doubleTemplate(c, this)
      case c @ IntConstant(_) =>
        intTemplate(c, this)
      case c @ ListConstant(_) =>
        listTemplate(c, this)
      case c @ MapConstant(_) =>
        mapTemplate(c, this)
      case c @ Identifier(name) =>
        `type`.asInstanceOf[ReferenceType].name + "." + name
    }
  }

  def writeFieldConst(name: String) = name.toUpperCase + "_FIELD_DESC"

  def writeTemplate(t: FieldType): Template[FieldType] = {
    t match {
      case TBinary => writeBinaryTemplate
      case _: ListType => writeListTemplate
      case _: SetType => writeSetTemplate
      case _: MapType => writeMapTemplate
      case _: ReferenceType => writeStructTemplate
      case _ => writeBasicTemplate
    }
  }

  def defaultValueTemplate(field: Field) = {
    field.default.map { d => constantTemplate(field.`type`, d) }.getOrElse {
      if (field.requiredness == Requiredness.Optional) {
        "None"
      } else {
        field.`type` match {
          case TBool => "false"
          case TByte | TI16 | TI32 | TI64 => "0"
          case TDouble => "0.0"
          case _ => "null"
        }
      }
    }
  }

  def constType(t: FunctionType): String = {
    t match {
      case Void => "VOID"
      case TBool => "BOOL"
      case TByte => "BYTE"
      case TDouble => "DOUBLE"
      case TI16 => "I16"
      case TI32 => "I32"
      case TI64 => "I64"
      case TString => "STRING"
      case TBinary => "STRING" // thrift's idea of "string" is based on old broken c++ semantics.
      case ReferenceType(_) => "STRUCT" // FIXME could also be Enum
      case MapType(_, _, _) => "MAP"
      case SetType(_, _) => "SET"
      case ListType(_, _) => "LIST"
      case x => throw new InternalError("constType#" + t)
    }
  }

  def protocolReadMethod(t: FunctionType): String = {
    t match {
      case TBool => "readBool"
      case TByte => "readByte"
      case TI16 => "readI16"
      case TI32 => "readI32"
      case TI64 => "readI64"
      case TDouble => "readDouble"
      case TString => "readString"
      case TBinary => "readBinary"
      case x => throw new InternalError("protocolReadMethod#" + t)
    }
  }

  def protocolWriteMethod(t: FunctionType): String = {
    t match {
      case TBool => "writeBool"
      case TByte => "writeByte"
      case TI16 => "writeI16"
      case TI32 => "writeI32"
      case TI64 => "writeI64"
      case TDouble => "writeDouble"
      case TString => "writeString"
      case TBinary => "writeBinary"
      case x => throw new InternalError("protocolWriteMethod#" + t)
    }
  }

  def scalaType(t: FunctionType): String = {
    t match {
      case Void => "Void"
      case TBool => "Boolean"
      case TByte => "Byte"
      case TI16 => "Short"
      case TI32 => "Int"
      case TI64 => "Long"
      case TDouble => "Double"
      case TString => "String"
      case TBinary => "Array[Byte]"
      case ReferenceType(x) => x
      case MapType(k, v, _) => "Map[" + scalaType(k) + ", " + scalaType(v) + "]"
      case SetType(x, _) => "Set[" + scalaType(x) + "]"
      case ListType(x, _) => "Seq[" + scalaType(x) + "]"
    }
  }

  def scalaFieldType(f: Field): String = {
    if (f.requiredness == Requiredness.Optional && f.default == None) {
      "Option[" + scalaType(f.`type`) + "]"
    } else {
      scalaType(f.`type`)
    }
  }

  def apply(enum: Enum): String = enumTemplate(enum, this)
  def apply(consts: ConstList): String = constsTemplate(consts, this)
  def apply(const: Const): String = constTemplate(const, this)
  def apply(struct: Struct): String = structTemplate(struct, this)

  def apply(doc: Document): String = {
    javaNamespace = doc.headers.collect {
      case Namespace("java", x) => x
    }.headOption.getOrElse("thrift")
    scalaNamespace = doc.headers.collect {
      case Namespace("scala", x) => x
    }.headOption.getOrElse(javaNamespace)

    apply(ConstList(doc.defs.collect { case c @ Const(_, _, _) => c }))
    doc.defs.foreach {
      case enum @ Enum(_, _) =>
        apply(enum)
      case Const(_, _, _) => // Already dealt with you
      case _ => // nothing for now.
    }
    ""
  }
}
