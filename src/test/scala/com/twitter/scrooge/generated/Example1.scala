/*
 * autogenerated by scrooge.
 */

package com.twitter.scrooge.generated

import com.twitter.scrooge.codec._
import net.lag.naggati.{End, ProtocolError, Step}

case class Example1Exception(var description: String) extends Exception with ThriftSerializable[Example1Exception] {
  def this() = this(null)

  val F_DESCRIPTION = 1

  var description__isSet = true

  def clearIsSet() {
    description__isSet = false
  }

  def decode(f: Example1Exception => Step): Step = {
    clearIsSet()
    _decode(f)
  }

  def _decode(f: Example1Exception => Step): Step = Codec.readStruct(this, f) {
    case (F_DESCRIPTION, Type.STRING) =>
      this.description__isSet = true
      Codec.readString { v => this.description = v; _decode(f) }
    case (_, ftype) => Codec.skip(ftype) { _decode(f) }
  }

  def encode(buffer: Buffer) {
    if (this.description__isSet) {
      buffer.writeFieldHeader(FieldHeader(Type.STRING, F_DESCRIPTION))
      buffer.writeString(this.description)
    }
    buffer.writeFieldHeader(FieldHeader(Type.STOP, 0))
  }
}

trait Example1 {
  @throws(classOf[Example1Exception]) def get_id(name: String): Int
}

object Example1 {
  def processor(impl: Example1) = new Processor {
    def apply(f: Buffer => Step) = process(f) {
      case request @ RequestHeader(MessageType.CALL, "get_id", _) =>
        handleMethod[Int, get_id_args, get_id_result](f, request) { args => impl.get_id(args.name) } {
          case (result, e: Example1Exception) =>
            result.ex__isSet = true
            result.ex = e
        }
    }
  }

  case class get_id_args(var name: String) extends ThriftSerializable[get_id_args] {
    def this() = this(null)

    val F_NAME = 1

    var name__isSet = true

    def clearIsSet() {
      name__isSet = false
    }

    def decode(f: get_id_args => Step): Step = {
      clearIsSet()
      _decode(f)
    }

    def _decode(f: get_id_args => Step): Step = Codec.readStruct(this, f) {
      case (F_NAME, Type.STRING) =>
        this.name__isSet = true
        Codec.readString { v => this.name = v; _decode(f) }
      case (_, ftype) => Codec.skip(ftype) { _decode(f) }
    }

    def encode(buffer: Buffer) {
      if (this.name__isSet) {
        buffer.writeFieldHeader(FieldHeader(Type.STRING, F_NAME))
        buffer.writeString(this.name)
      }
      buffer.writeFieldHeader(FieldHeader(Type.STOP, 0))
    }
  }

  case class get_id_result(var _rv: Int, var ex: Example1Exception) extends ThriftResult[get_id_result, Int] {
    def this() = this(0, new Example1Exception())

    val F__RV = 0
    val F_EX = -1

    var _rv__isSet = true
    var ex__isSet = true

    def clearIsSet() {
      _rv__isSet = false
      ex__isSet = false
    }

    def decode(f: get_id_result => Step): Step = {
      clearIsSet()
      _decode(f)
    }

    def _decode(f: get_id_result => Step): Step = Codec.readStruct(this, f) {
      case (F__RV, Type.I32) =>
        this._rv__isSet = true
        Codec.readI32 { v => this._rv = v; _decode(f) }
      case (F_EX, Type.STRUCT) =>
        this.ex__isSet = true
        (new Example1Exception).decode { v => this.ex = v; _decode(f) }
      case (_, ftype) => Codec.skip(ftype) { _decode(f) }
    }

    def encode(buffer: Buffer) {
      if (this._rv__isSet) {
        buffer.writeFieldHeader(FieldHeader(Type.I32, F__RV))
        buffer.writeI32(this._rv)
      }
      if (this.ex__isSet) {
        buffer.writeFieldHeader(FieldHeader(Type.STRUCT, F_EX))
        this.ex.encode(buffer)
      }
      buffer.writeFieldHeader(FieldHeader(Type.STOP, 0))
    }
  }
}

