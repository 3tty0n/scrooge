/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Xtruct2 implements TBase<Xtruct2, Xtruct2._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Xtruct2");

  private static final TField BYTE_THING_FIELD_DESC = new TField("byte_thing", TType.BYTE, (short)1);
  private static final TField STRUCT_THING_FIELD_DESC = new TField("struct_thing", TType.STRUCT, (short)2);
  private static final TField I32_THING_FIELD_DESC = new TField("i32_thing", TType.I32, (short)3);

  public byte byte_thing;
  public Xtruct struct_thing;
  public int i32_thing;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BYTE_THING((short)1, "byte_thing"),
    STRUCT_THING((short)2, "struct_thing"),
    I32_THING((short)3, "i32_thing");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BYTE_THING
          return BYTE_THING;
        case 2: // STRUCT_THING
          return STRUCT_THING;
        case 3: // I32_THING
          return I32_THING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BYTE_THING_ISSET_ID = 0;
  private static final int __I32_THING_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BYTE_THING, new FieldMetaData("byte_thing", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMap.put(_Fields.STRUCT_THING, new FieldMetaData("struct_thing", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Xtruct.class)));
    tmpMap.put(_Fields.I32_THING, new FieldMetaData("i32_thing", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Xtruct2.class, metaDataMap);
  }

  public Xtruct2() {
  }

  public Xtruct2(
    byte byte_thing,
    Xtruct struct_thing,
    int i32_thing)
  {
    this();
    this.byte_thing = byte_thing;
    setByte_thingIsSet(true);
    this.struct_thing = struct_thing;
    this.i32_thing = i32_thing;
    setI32_thingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Xtruct2(Xtruct2 other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.byte_thing = other.byte_thing;
    if (other.isSetStruct_thing()) {
      this.struct_thing = new Xtruct(other.struct_thing);
    }
    this.i32_thing = other.i32_thing;
  }

  public Xtruct2 deepCopy() {
    return new Xtruct2(this);
  }

  @Override
  public void clear() {
    setByte_thingIsSet(false);
    this.byte_thing = 0;
    this.struct_thing = null;
    setI32_thingIsSet(false);
    this.i32_thing = 0;
  }

  public byte getByte_thing() {
    return this.byte_thing;
  }

  public Xtruct2 setByte_thing(byte byte_thing) {
    this.byte_thing = byte_thing;
    setByte_thingIsSet(true);
    return this;
  }

  public void unsetByte_thing() {
    __isset_bit_vector.clear(__BYTE_THING_ISSET_ID);
  }

  /** Returns true if field byte_thing is set (has been asigned a value) and false otherwise */
  public boolean isSetByte_thing() {
    return __isset_bit_vector.get(__BYTE_THING_ISSET_ID);
  }

  public void setByte_thingIsSet(boolean value) {
    __isset_bit_vector.set(__BYTE_THING_ISSET_ID, value);
  }

  public Xtruct getStruct_thing() {
    return this.struct_thing;
  }

  public Xtruct2 setStruct_thing(Xtruct struct_thing) {
    this.struct_thing = struct_thing;
    return this;
  }

  public void unsetStruct_thing() {
    this.struct_thing = null;
  }

  /** Returns true if field struct_thing is set (has been asigned a value) and false otherwise */
  public boolean isSetStruct_thing() {
    return this.struct_thing != null;
  }

  public void setStruct_thingIsSet(boolean value) {
    if (!value) {
      this.struct_thing = null;
    }
  }

  public int getI32_thing() {
    return this.i32_thing;
  }

  public Xtruct2 setI32_thing(int i32_thing) {
    this.i32_thing = i32_thing;
    setI32_thingIsSet(true);
    return this;
  }

  public void unsetI32_thing() {
    __isset_bit_vector.clear(__I32_THING_ISSET_ID);
  }

  /** Returns true if field i32_thing is set (has been asigned a value) and false otherwise */
  public boolean isSetI32_thing() {
    return __isset_bit_vector.get(__I32_THING_ISSET_ID);
  }

  public void setI32_thingIsSet(boolean value) {
    __isset_bit_vector.set(__I32_THING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BYTE_THING:
      if (value == null) {
        unsetByte_thing();
      } else {
        setByte_thing((Byte)value);
      }
      break;

    case STRUCT_THING:
      if (value == null) {
        unsetStruct_thing();
      } else {
        setStruct_thing((Xtruct)value);
      }
      break;

    case I32_THING:
      if (value == null) {
        unsetI32_thing();
      } else {
        setI32_thing((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BYTE_THING:
      return new Byte(getByte_thing());

    case STRUCT_THING:
      return getStruct_thing();

    case I32_THING:
      return new Integer(getI32_thing());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BYTE_THING:
      return isSetByte_thing();
    case STRUCT_THING:
      return isSetStruct_thing();
    case I32_THING:
      return isSetI32_thing();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Xtruct2)
      return this.equals((Xtruct2)that);
    return false;
  }

  public boolean equals(Xtruct2 that) {
    if (that == null)
      return false;

    boolean this_present_byte_thing = true;
    boolean that_present_byte_thing = true;
    if (this_present_byte_thing || that_present_byte_thing) {
      if (!(this_present_byte_thing && that_present_byte_thing))
        return false;
      if (this.byte_thing != that.byte_thing)
        return false;
    }

    boolean this_present_struct_thing = true && this.isSetStruct_thing();
    boolean that_present_struct_thing = true && that.isSetStruct_thing();
    if (this_present_struct_thing || that_present_struct_thing) {
      if (!(this_present_struct_thing && that_present_struct_thing))
        return false;
      if (!this.struct_thing.equals(that.struct_thing))
        return false;
    }

    boolean this_present_i32_thing = true;
    boolean that_present_i32_thing = true;
    if (this_present_i32_thing || that_present_i32_thing) {
      if (!(this_present_i32_thing && that_present_i32_thing))
        return false;
      if (this.i32_thing != that.i32_thing)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Xtruct2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Xtruct2 typedOther = (Xtruct2)other;

    lastComparison = Boolean.valueOf(isSetByte_thing()).compareTo(typedOther.isSetByte_thing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_thing()) {
      lastComparison = TBaseHelper.compareTo(this.byte_thing, typedOther.byte_thing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStruct_thing()).compareTo(typedOther.isSetStruct_thing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStruct_thing()) {
      lastComparison = TBaseHelper.compareTo(this.struct_thing, typedOther.struct_thing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_thing()).compareTo(typedOther.isSetI32_thing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_thing()) {
      lastComparison = TBaseHelper.compareTo(this.i32_thing, typedOther.i32_thing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // BYTE_THING
          if (field.type == TType.BYTE) {
            this.byte_thing = iprot.readByte();
            setByte_thingIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STRUCT_THING
          if (field.type == TType.STRUCT) {
            this.struct_thing = new Xtruct();
            this.struct_thing.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // I32_THING
          if (field.type == TType.I32) {
            this.i32_thing = iprot.readI32();
            setI32_thingIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(BYTE_THING_FIELD_DESC);
    oprot.writeByte(this.byte_thing);
    oprot.writeFieldEnd();
    if (this.struct_thing != null) {
      oprot.writeFieldBegin(STRUCT_THING_FIELD_DESC);
      this.struct_thing.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(I32_THING_FIELD_DESC);
    oprot.writeI32(this.i32_thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Xtruct2(");
    boolean first = true;

    sb.append("byte_thing:");
    sb.append(this.byte_thing);
    first = false;
    if (!first) sb.append(", ");
    sb.append("struct_thing:");
    if (this.struct_thing == null) {
      sb.append("null");
    } else {
      sb.append(this.struct_thing);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32_thing:");
    sb.append(this.i32_thing);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

