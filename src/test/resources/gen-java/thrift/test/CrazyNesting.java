/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CrazyNesting implements TBase<CrazyNesting, CrazyNesting._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CrazyNesting");

  private static final TField STRING_FIELD_FIELD_DESC = new TField("string_field", TType.STRING, (short)1);
  private static final TField SET_FIELD_FIELD_DESC = new TField("set_field", TType.SET, (short)2);
  private static final TField LIST_FIELD_FIELD_DESC = new TField("list_field", TType.LIST, (short)3);
  private static final TField BINARY_FIELD_FIELD_DESC = new TField("binary_field", TType.STRING, (short)4);

  public String string_field;
  public Set<Insanity> set_field;
  public List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> list_field;
  public ByteBuffer binary_field;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    STRING_FIELD((short)1, "string_field"),
    SET_FIELD((short)2, "set_field"),
    LIST_FIELD((short)3, "list_field"),
    BINARY_FIELD((short)4, "binary_field");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_FIELD
          return STRING_FIELD;
        case 2: // SET_FIELD
          return SET_FIELD;
        case 3: // LIST_FIELD
          return LIST_FIELD;
        case 4: // BINARY_FIELD
          return BINARY_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_FIELD, new FieldMetaData("string_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SET_FIELD, new FieldMetaData("set_field", TFieldRequirementType.OPTIONAL, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, Insanity.class))));
    tmpMap.put(_Fields.LIST_FIELD, new FieldMetaData("list_field", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new SetMetaData(TType.SET, 
                    new FieldValueMetaData(TType.I32)), 
                new MapMetaData(TType.MAP, 
                    new FieldValueMetaData(TType.I32), 
                    new SetMetaData(TType.SET, 
                        new ListMetaData(TType.LIST, 
                            new MapMetaData(TType.MAP, 
                                new StructMetaData(TType.STRUCT, Insanity.class), 
                                new FieldValueMetaData(TType.STRING)))))))));
    tmpMap.put(_Fields.BINARY_FIELD, new FieldMetaData("binary_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CrazyNesting.class, metaDataMap);
  }

  public CrazyNesting() {
  }

  public CrazyNesting(
    String string_field,
    List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> list_field,
    ByteBuffer binary_field)
  {
    this();
    this.string_field = string_field;
    this.list_field = list_field;
    this.binary_field = binary_field;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrazyNesting(CrazyNesting other) {
    if (other.isSetString_field()) {
      this.string_field = other.string_field;
    }
    if (other.isSetSet_field()) {
      Set<Insanity> __this__set_field = new HashSet<Insanity>();
      for (Insanity other_element : other.set_field) {
        __this__set_field.add(new Insanity(other_element));
      }
      this.set_field = __this__set_field;
    }
    if (other.isSetList_field()) {
      List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> __this__list_field = new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>();
      for (Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> other_element : other.list_field) {
        Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> __this__list_field_copy = new HashMap<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>();
        for (Map.Entry<Set<Integer>, Map<Integer,Set<List<Map<Insanity,String>>>>> other_element_element : other_element.entrySet()) {

          Set<Integer> other_element_element_key = other_element_element.getKey();
          Map<Integer,Set<List<Map<Insanity,String>>>> other_element_element_value = other_element_element.getValue();

          Set<Integer> __this__list_field_copy_copy_key = new HashSet<Integer>();
          for (Integer other_element_element_key_element : other_element_element_key) {
            __this__list_field_copy_copy_key.add(other_element_element_key_element);
          }

          Map<Integer,Set<List<Map<Insanity,String>>>> __this__list_field_copy_copy_value = new HashMap<Integer,Set<List<Map<Insanity,String>>>>();
          for (Map.Entry<Integer, Set<List<Map<Insanity,String>>>> other_element_element_value_element : other_element_element_value.entrySet()) {

            Integer other_element_element_value_element_key = other_element_element_value_element.getKey();
            Set<List<Map<Insanity,String>>> other_element_element_value_element_value = other_element_element_value_element.getValue();

            Integer __this__list_field_copy_copy_value_copy_key = other_element_element_value_element_key;

            Set<List<Map<Insanity,String>>> __this__list_field_copy_copy_value_copy_value = new HashSet<List<Map<Insanity,String>>>();
            for (List<Map<Insanity,String>> other_element_element_value_element_value_element : other_element_element_value_element_value) {
              List<Map<Insanity,String>> __this__list_field_copy_copy_value_copy_value_copy = new ArrayList<Map<Insanity,String>>();
              for (Map<Insanity,String> other_element_element_value_element_value_element_element : other_element_element_value_element_value_element) {
                Map<Insanity,String> __this__list_field_copy_copy_value_copy_value_copy_copy = new HashMap<Insanity,String>();
                for (Map.Entry<Insanity, String> other_element_element_value_element_value_element_element_element : other_element_element_value_element_value_element_element.entrySet()) {

                  Insanity other_element_element_value_element_value_element_element_element_key = other_element_element_value_element_value_element_element_element.getKey();
                  String other_element_element_value_element_value_element_element_element_value = other_element_element_value_element_value_element_element_element.getValue();

                  Insanity __this__list_field_copy_copy_value_copy_value_copy_copy_copy_key = new Insanity(other_element_element_value_element_value_element_element_element_key);

                  String __this__list_field_copy_copy_value_copy_value_copy_copy_copy_value = other_element_element_value_element_value_element_element_element_value;

                  __this__list_field_copy_copy_value_copy_value_copy_copy.put(__this__list_field_copy_copy_value_copy_value_copy_copy_copy_key, __this__list_field_copy_copy_value_copy_value_copy_copy_copy_value);
                }
                __this__list_field_copy_copy_value_copy_value_copy.add(__this__list_field_copy_copy_value_copy_value_copy_copy);
              }
              __this__list_field_copy_copy_value_copy_value.add(__this__list_field_copy_copy_value_copy_value_copy);
            }

            __this__list_field_copy_copy_value.put(__this__list_field_copy_copy_value_copy_key, __this__list_field_copy_copy_value_copy_value);
          }

          __this__list_field_copy.put(__this__list_field_copy_copy_key, __this__list_field_copy_copy_value);
        }
        __this__list_field.add(__this__list_field_copy);
      }
      this.list_field = __this__list_field;
    }
    if (other.isSetBinary_field()) {
      this.binary_field = TBaseHelper.copyBinary(other.binary_field);
;
    }
  }

  public CrazyNesting deepCopy() {
    return new CrazyNesting(this);
  }

  @Override
  public void clear() {
    this.string_field = null;
    this.set_field = null;
    this.list_field = null;
    this.binary_field = null;
  }

  public String getString_field() {
    return this.string_field;
  }

  public CrazyNesting setString_field(String string_field) {
    this.string_field = string_field;
    return this;
  }

  public void unsetString_field() {
    this.string_field = null;
  }

  /** Returns true if field string_field is set (has been asigned a value) and false otherwise */
  public boolean isSetString_field() {
    return this.string_field != null;
  }

  public void setString_fieldIsSet(boolean value) {
    if (!value) {
      this.string_field = null;
    }
  }

  public int getSet_fieldSize() {
    return (this.set_field == null) ? 0 : this.set_field.size();
  }

  public java.util.Iterator<Insanity> getSet_fieldIterator() {
    return (this.set_field == null) ? null : this.set_field.iterator();
  }

  public void addToSet_field(Insanity elem) {
    if (this.set_field == null) {
      this.set_field = new HashSet<Insanity>();
    }
    this.set_field.add(elem);
  }

  public Set<Insanity> getSet_field() {
    return this.set_field;
  }

  public CrazyNesting setSet_field(Set<Insanity> set_field) {
    this.set_field = set_field;
    return this;
  }

  public void unsetSet_field() {
    this.set_field = null;
  }

  /** Returns true if field set_field is set (has been asigned a value) and false otherwise */
  public boolean isSetSet_field() {
    return this.set_field != null;
  }

  public void setSet_fieldIsSet(boolean value) {
    if (!value) {
      this.set_field = null;
    }
  }

  public int getList_fieldSize() {
    return (this.list_field == null) ? 0 : this.list_field.size();
  }

  public java.util.Iterator<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> getList_fieldIterator() {
    return (this.list_field == null) ? null : this.list_field.iterator();
  }

  public void addToList_field(Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> elem) {
    if (this.list_field == null) {
      this.list_field = new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>();
    }
    this.list_field.add(elem);
  }

  public List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> getList_field() {
    return this.list_field;
  }

  public CrazyNesting setList_field(List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> list_field) {
    this.list_field = list_field;
    return this;
  }

  public void unsetList_field() {
    this.list_field = null;
  }

  /** Returns true if field list_field is set (has been asigned a value) and false otherwise */
  public boolean isSetList_field() {
    return this.list_field != null;
  }

  public void setList_fieldIsSet(boolean value) {
    if (!value) {
      this.list_field = null;
    }
  }

  public byte[] getBinary_field() {
    setBinary_field(TBaseHelper.rightSize(binary_field));
    return binary_field.array();
  }

  public ByteBuffer BufferForBinary_field() {
    return binary_field;
  }

  public CrazyNesting setBinary_field(byte[] binary_field) {
    setBinary_field(ByteBuffer.wrap(binary_field));
    return this;
  }

  public CrazyNesting setBinary_field(ByteBuffer binary_field) {
    this.binary_field = binary_field;
    return this;
  }

  public void unsetBinary_field() {
    this.binary_field = null;
  }

  /** Returns true if field binary_field is set (has been asigned a value) and false otherwise */
  public boolean isSetBinary_field() {
    return this.binary_field != null;
  }

  public void setBinary_fieldIsSet(boolean value) {
    if (!value) {
      this.binary_field = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRING_FIELD:
      if (value == null) {
        unsetString_field();
      } else {
        setString_field((String)value);
      }
      break;

    case SET_FIELD:
      if (value == null) {
        unsetSet_field();
      } else {
        setSet_field((Set<Insanity>)value);
      }
      break;

    case LIST_FIELD:
      if (value == null) {
        unsetList_field();
      } else {
        setList_field((List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>)value);
      }
      break;

    case BINARY_FIELD:
      if (value == null) {
        unsetBinary_field();
      } else {
        setBinary_field((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRING_FIELD:
      return getString_field();

    case SET_FIELD:
      return getSet_field();

    case LIST_FIELD:
      return getList_field();

    case BINARY_FIELD:
      return getBinary_field();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRING_FIELD:
      return isSetString_field();
    case SET_FIELD:
      return isSetSet_field();
    case LIST_FIELD:
      return isSetList_field();
    case BINARY_FIELD:
      return isSetBinary_field();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrazyNesting)
      return this.equals((CrazyNesting)that);
    return false;
  }

  public boolean equals(CrazyNesting that) {
    if (that == null)
      return false;

    boolean this_present_string_field = true && this.isSetString_field();
    boolean that_present_string_field = true && that.isSetString_field();
    if (this_present_string_field || that_present_string_field) {
      if (!(this_present_string_field && that_present_string_field))
        return false;
      if (!this.string_field.equals(that.string_field))
        return false;
    }

    boolean this_present_set_field = true && this.isSetSet_field();
    boolean that_present_set_field = true && that.isSetSet_field();
    if (this_present_set_field || that_present_set_field) {
      if (!(this_present_set_field && that_present_set_field))
        return false;
      if (!this.set_field.equals(that.set_field))
        return false;
    }

    boolean this_present_list_field = true && this.isSetList_field();
    boolean that_present_list_field = true && that.isSetList_field();
    if (this_present_list_field || that_present_list_field) {
      if (!(this_present_list_field && that_present_list_field))
        return false;
      if (!this.list_field.equals(that.list_field))
        return false;
    }

    boolean this_present_binary_field = true && this.isSetBinary_field();
    boolean that_present_binary_field = true && that.isSetBinary_field();
    if (this_present_binary_field || that_present_binary_field) {
      if (!(this_present_binary_field && that_present_binary_field))
        return false;
      if (!this.binary_field.equals(that.binary_field))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CrazyNesting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CrazyNesting typedOther = (CrazyNesting)other;

    lastComparison = Boolean.valueOf(isSetString_field()).compareTo(typedOther.isSetString_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_field()) {
      lastComparison = TBaseHelper.compareTo(this.string_field, typedOther.string_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_field()).compareTo(typedOther.isSetSet_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_field()) {
      lastComparison = TBaseHelper.compareTo(this.set_field, typedOther.set_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetList_field()).compareTo(typedOther.isSetList_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_field()) {
      lastComparison = TBaseHelper.compareTo(this.list_field, typedOther.list_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_field()).compareTo(typedOther.isSetBinary_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_field()) {
      lastComparison = TBaseHelper.compareTo(this.binary_field, typedOther.binary_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STRING_FIELD
          if (field.type == TType.STRING) {
            this.string_field = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SET_FIELD
          if (field.type == TType.SET) {
            {
              TSet _set13 = iprot.readSetBegin();
              this.set_field = new HashSet<Insanity>(2*_set13.size);
              for (int _i14 = 0; _i14 < _set13.size; ++_i14)
              {
                Insanity _elem15;
                _elem15 = new Insanity();
                _elem15.read(iprot);
                this.set_field.add(_elem15);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LIST_FIELD
          if (field.type == TType.LIST) {
            {
              TList _list16 = iprot.readListBegin();
              this.list_field = new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>(_list16.size);
              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
              {
                Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> _elem18;
                {
                  TMap _map19 = iprot.readMapBegin();
                  _elem18 = new HashMap<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>(2*_map19.size);
                  for (int _i20 = 0; _i20 < _map19.size; ++_i20)
                  {
                    Set<Integer> _key21;
                    Map<Integer,Set<List<Map<Insanity,String>>>> _val22;
                    {
                      TSet _set23 = iprot.readSetBegin();
                      _key21 = new HashSet<Integer>(2*_set23.size);
                      for (int _i24 = 0; _i24 < _set23.size; ++_i24)
                      {
                        int _elem25;
                        _elem25 = iprot.readI32();
                        _key21.add(_elem25);
                      }
                      iprot.readSetEnd();
                    }
                    {
                      TMap _map26 = iprot.readMapBegin();
                      _val22 = new HashMap<Integer,Set<List<Map<Insanity,String>>>>(2*_map26.size);
                      for (int _i27 = 0; _i27 < _map26.size; ++_i27)
                      {
                        int _key28;
                        Set<List<Map<Insanity,String>>> _val29;
                        _key28 = iprot.readI32();
                        {
                          TSet _set30 = iprot.readSetBegin();
                          _val29 = new HashSet<List<Map<Insanity,String>>>(2*_set30.size);
                          for (int _i31 = 0; _i31 < _set30.size; ++_i31)
                          {
                            List<Map<Insanity,String>> _elem32;
                            {
                              TList _list33 = iprot.readListBegin();
                              _elem32 = new ArrayList<Map<Insanity,String>>(_list33.size);
                              for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                              {
                                Map<Insanity,String> _elem35;
                                {
                                  TMap _map36 = iprot.readMapBegin();
                                  _elem35 = new HashMap<Insanity,String>(2*_map36.size);
                                  for (int _i37 = 0; _i37 < _map36.size; ++_i37)
                                  {
                                    Insanity _key38;
                                    String _val39;
                                    _key38 = new Insanity();
                                    _key38.read(iprot);
                                    _val39 = iprot.readString();
                                    _elem35.put(_key38, _val39);
                                  }
                                  iprot.readMapEnd();
                                }
                                _elem32.add(_elem35);
                              }
                              iprot.readListEnd();
                            }
                            _val29.add(_elem32);
                          }
                          iprot.readSetEnd();
                        }
                        _val22.put(_key28, _val29);
                      }
                      iprot.readMapEnd();
                    }
                    _elem18.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                this.list_field.add(_elem18);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BINARY_FIELD
          if (field.type == TType.STRING) {
            this.binary_field = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.string_field != null) {
      oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.string_field);
      oprot.writeFieldEnd();
    }
    if (this.set_field != null) {
      if (isSetSet_field()) {
        oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRUCT, this.set_field.size()));
          for (Insanity _iter40 : this.set_field)
          {
            _iter40.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.list_field != null) {
      oprot.writeFieldBegin(LIST_FIELD_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.list_field.size()));
        for (Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> _iter41 : this.list_field)
        {
          {
            oprot.writeMapBegin(new TMap(TType.SET, TType.MAP, _iter41.size()));
            for (Map.Entry<Set<Integer>, Map<Integer,Set<List<Map<Insanity,String>>>>> _iter42 : _iter41.entrySet())
            {
              {
                oprot.writeSetBegin(new TSet(TType.I32, _iter42.getKey().size()));
                for (int _iter43 : _iter42.getKey())
                {
                  oprot.writeI32(_iter43);
                }
                oprot.writeSetEnd();
              }
              {
                oprot.writeMapBegin(new TMap(TType.I32, TType.SET, _iter42.getValue().size()));
                for (Map.Entry<Integer, Set<List<Map<Insanity,String>>>> _iter44 : _iter42.getValue().entrySet())
                {
                  oprot.writeI32(_iter44.getKey());
                  {
                    oprot.writeSetBegin(new TSet(TType.LIST, _iter44.getValue().size()));
                    for (List<Map<Insanity,String>> _iter45 : _iter44.getValue())
                    {
                      {
                        oprot.writeListBegin(new TList(TType.MAP, _iter45.size()));
                        for (Map<Insanity,String> _iter46 : _iter45)
                        {
                          {
                            oprot.writeMapBegin(new TMap(TType.STRUCT, TType.STRING, _iter46.size()));
                            for (Map.Entry<Insanity, String> _iter47 : _iter46.entrySet())
                            {
                              _iter47.getKey().write(oprot);
                              oprot.writeString(_iter47.getValue());
                            }
                            oprot.writeMapEnd();
                          }
                        }
                        oprot.writeListEnd();
                      }
                    }
                    oprot.writeSetEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.binary_field != null) {
      oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
      oprot.writeBinary(this.binary_field);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrazyNesting(");
    boolean first = true;

    sb.append("string_field:");
    if (this.string_field == null) {
      sb.append("null");
    } else {
      sb.append(this.string_field);
    }
    first = false;
    if (isSetSet_field()) {
      if (!first) sb.append(", ");
      sb.append("set_field:");
      if (this.set_field == null) {
        sb.append("null");
      } else {
        sb.append(this.set_field);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("list_field:");
    if (this.list_field == null) {
      sb.append("null");
    } else {
      sb.append(this.list_field);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binary_field:");
    if (this.binary_field == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.binary_field, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (list_field == null) {
      throw new TProtocolException("Required field 'list_field' was not present! Struct: " + toString());
    }
  }

}

