3.0.2 - 11/16/2012
===============================================================================
* Adding a "--gen-file-map <path>" option to Scrooge command line. It tells
  what output files each input Thrift files generates, in the following format:
     inputPath/input.thrift -> outputPath/Constants.scala
     inputPath/input.thrift -> outputPath/FooStruct.scala
* The generated enums now have a common trait ThriftEnum(defined in
  scrooge-runtime), that allows you to query the name as well as the value of
  the enum field.
* The generated Scala enums now are Java-serializable.
* The generated FinagledClient class takes val arguments to make "service",
  "protocol" accessible:
       class FinagledClient(
         val service: ...,
         val protocol: ...,
         val serviceName: ...
         stats: ...
       )

3.0.1 - 10/30/2012
===============================================================================
Features and bug fixes
* Doc comments are included in the generated code.
* Generated exception structs now have getMessage() method
* Generate header that emits Scrooge version
* You can now import a directory or a Jar/Zip file through command line
  argument, which will be stored in a chain of paths maintained by Scrooge.
  Then refer to a file using relative path in the thrift "include" statement.
  Scrooge will locate the file in the path chain.
* Introduce a "strict" mode that defaults to on. Unfavored syntax throws an
  exception when "strict" mode is on and prints a warning when it's off. The
  strict mode can be disabled by specifying the "--disable-strict" argument.
* The "oneway" modifier is treated as an OnewayNotSupportedException in strict
  mode and a warning in non-strict mode.
* Support Union types. Given:
       union Point {
         1: double x
         2: double y
         3: Color color = BLUE
       }
  Scrooge generates:
       sealed trait Point
       object Point {
         case class X(x: Double) extends Point
         case class Y(y: Double) extends Point
         case class Count(color: Color = Color.Blue) extends Point
       }
  The "required" and "optional" modifiers in a union type will throw
  exceptions in strict mode and print warnings in non-strict mode.
* Have a common trait ThriftException for all the thrift exception structs.
* Support cross file service inheritance. Now you can do
       include "foo.thrift"
       service MyService extends foo.FooService { ... }
* Bug fix: It couldn't resolve a symbol imported through a relative path and
  threw an UndefinedSymbolException
* Bug fix: namespace aliasing put the parentheses in the wrong place.
* Bug fix: services using binary fields wouldn't compile
* Bug fix: cross-file const referencing didn't work

Implementation updates
* Project structure:
    - frontend: Importer and ThriftParser
    - mustache: everything related to mustache, including template parser, loader
      and handlebar
    - ast: Thrift AST definition
    - backend: code generation include various generators and dictionaries to
      hydrate Mustache templates.
* Redefine clear and separate responsibilities of each components:
    - Move ID manipulation(concatenation, case conversion, keyword rewriting etc)
      to Generator phase.
    - Utilizing Scala static type checking to enforce scoping correctness by
      introducing SimpleID and QualifiedID to AST.
    - Enforce dictionary key uniqueness for nested Mustache templates.
* Scrooge project is now on Maven
* Delete obsolete code and tests

Dependencies:
* Upgraded to util 5.3.13, finagle 5.3.30
* Removed dependency on sbt
* Add dependency on maven

3.0.0 - 05/24/2012
===============================================================================
* Java code generation is now supported!
* Scala code now generates a set of classes for each struct:
    - a base trait
    - an immutable case class (used as the default implementation)
    - a proxy trait (to make it easy to build proxy classes)
* Moved scrooge-runtime into the same repo with scrooge, which is now called
  scrooge-generator. Both projects will keep version numbers in sync now.
* Changed the way required/optional is treated on fields, and default values,
  to more closely match the way Apache Thrift works. (This is described in
  more detail in a new section of the README.)
* Fixed constant sets.
* Fixed thread safety in finagle ThriftServer.
* Fixed the resolution of #include directives that follow relative paths.
* Removed the finagle dependency from scrooge-runtime so that code generated
  with scrooge can be loosely coupled with finagle, or optionally not depend
  on finagle at all (if you don't build finagle bindings).
* Fixed typedef references that were relative to #included files.
* Made various improvements to the internal template system.
* Fixed test speed by using scrooge to generate code that the tests build
  against, avoiding runtime evaluation.

Dependencies:
* Upgraded to thrift 0.8.0, util 4.0, and finagle 4.0.
* Upgraded to sbt 0.11.2.
* Upgraded to scala 2.9.2.


2.5.4 - 03/19/2012
===============================================================================
* Addressed an issue where structs with the same name but from different
  namespaces/packages would conflict.  Now using a package alias to
  disambiguate.


2.5.3 - 03/02/2012
===============================================================================
* Minor bug fix for serviceName name class with.


2.4.0 - 01/03/2012
===============================================================================
* added support for structs with more than 22 fields, which previously was the
  limit as that is the max case-class size in scala.  For structs larger than
  this, instead of using case-classes, normal classes are used but with most of
  the case-class boilerplate support code also generated, allowing these structs
  to be used as if they were case-classes.  The only exception is that there is
  no unapply method; but do you really want to unapply 23+ fields in a match
  statement?


2.3.1 - 11/28/2011
===============================================================================
* thriftProtocolFactory in generated ThriftServer now has
  type of TProtocolFactory, so you can override it with other
  protocol factories.


2.3.0 - 11/24/2011
===============================================================================
* You can now override serverBuilder in ThriftServer to provide
  additional server configuration
* The protocol factory to the FinagledClient now has a default
  value of TBinaryProtocol.Factory, which means you don't have
  to specify it when using the default.


2.2.0 - 11/04/2011
===============================================================================
* tracerFactory support in ThriftServer.


2.1.0 - 10/23/2011
===============================================================================
* Support for tracing in server.


2.0.2
===============================================================================
* fixes a bug in which namespace mapping was not applied
  recursively to included documents.


2.0.1
===============================================================================
* fixes a bug in which qualified service names from imported
  thrift files were not resolved properly.


2.0.0
===============================================================================
* fixes a bug with enum in which the first value was wrong.


1.1.1 - 8/24/2011
===============================================================================
* scrooge-runtime-1.0.1
* Each thrift struct companion object now extends ThriftStructCodec
* Correctly resolving enum constants and Const values.
* Title-casing enum value names.
* Added support for namespace renaming from the command line.
