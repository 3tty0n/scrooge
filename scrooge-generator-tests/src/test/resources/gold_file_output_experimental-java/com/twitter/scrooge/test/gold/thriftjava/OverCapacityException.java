/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */

package com.twitter.scrooge.test.gold.thriftjava;

import com.twitter.scrooge.Option;
import com.twitter.scrooge.Utilities;
import com.twitter.scrooge.ThriftStruct;
import com.twitter.scrooge.ThriftStructCodec;
import com.twitter.scrooge.ThriftStructCodec3;
import org.apache.thrift.protocol.*;
import java.nio.ByteBuffer;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;


@javax.annotation.Generated(value = "com.twitter.scrooge.Compiler")
public class OverCapacityException extends Exception implements ThriftStruct {
  private static final TStruct STRUCT = new TStruct("OverCapacityException");
  private static final TField ChillTimeSecondsField = new TField("chillTimeSeconds", TType.I32, (short) 1);
  final int chillTimeSeconds;

  public static class Builder {
    private int _chillTimeSeconds = 0;
    private Boolean _got_chillTimeSeconds = false;

    public Builder chillTimeSeconds(int value) {
      this._chillTimeSeconds = value;
      this._got_chillTimeSeconds = true;
      return this;
    }

    public Builder unsetChillTimeSeconds() {
      this._chillTimeSeconds = 0;
      this._got_chillTimeSeconds = false;
      return this;
    }

    public OverCapacityException build() {
      return new OverCapacityException(
        this._chillTimeSeconds    );
    }
  }

  public Builder copy() {
    Builder builder = new Builder();
    builder.chillTimeSeconds(this.chillTimeSeconds);
    return builder;
  }

  public static ThriftStructCodec<OverCapacityException> CODEC = new ThriftStructCodec3<OverCapacityException>() {
    @java.lang.Override
    public OverCapacityException decode(TProtocol _iprot) throws org.apache.thrift.TException {
      Builder builder = new Builder();
      int chillTimeSeconds = 0;
      Boolean _done = false;
      _iprot.readStructBegin();
      while (!_done) {
        TField _field = _iprot.readFieldBegin();
        if (_field.type == TType.STOP) {
          _done = true;
        } else {
          switch (_field.id) {
            case 1: /* chillTimeSeconds */
              switch (_field.type) {
                case TType.I32:
                  Integer chillTimeSeconds_item;
                  chillTimeSeconds_item = _iprot.readI32();
                  chillTimeSeconds = chillTimeSeconds_item;
                  break;
                default:
                  TProtocolUtil.skip(_iprot, _field.type);
              }
              builder.chillTimeSeconds(chillTimeSeconds);
              break;
            default:
              TProtocolUtil.skip(_iprot, _field.type);
          }
          _iprot.readFieldEnd();
        }
      }
      _iprot.readStructEnd();
      try {
        return builder.build();
      } catch (IllegalStateException stateEx) {
        throw new TProtocolException(stateEx.getMessage());
      }
    }

    @java.lang.Override
    public void encode(OverCapacityException struct, TProtocol oprot) throws org.apache.thrift.TException {
      struct.write(oprot);
    }
  };

  public static OverCapacityException decode(TProtocol _iprot) throws org.apache.thrift.TException {
    return CODEC.decode(_iprot);
  }

  public static void encode(OverCapacityException struct, TProtocol oprot) throws org.apache.thrift.TException {
    CODEC.encode(struct, oprot);
  }

  public OverCapacityException(
    int chillTimeSeconds
  ) {
    this.chillTimeSeconds = chillTimeSeconds;
  }


  public int getChillTimeSeconds() {
    return this.chillTimeSeconds;
  }

  public void write(TProtocol _oprot) throws org.apache.thrift.TException {
    validate();
    _oprot.writeStructBegin(STRUCT);
      _oprot.writeFieldBegin(ChillTimeSecondsField);
      Integer chillTimeSeconds_item = chillTimeSeconds;
      _oprot.writeI32(chillTimeSeconds_item);
      _oprot.writeFieldEnd();
    _oprot.writeFieldStop();
    _oprot.writeStructEnd();
  }

  private void validate() throws org.apache.thrift.protocol.TProtocolException {
  }


  @java.lang.Override
  public boolean equals(Object other) {
    if (!(other instanceof OverCapacityException)) return false;
    OverCapacityException that = (OverCapacityException) other;
    return
      this.chillTimeSeconds == that.chillTimeSeconds
;
  }

  @java.lang.Override
  public String toString() {
    return "OverCapacityException(" + this.chillTimeSeconds + ")";
  }

  @java.lang.Override
  public int hashCode() {
    int hash = 1;
    hash = hash * new Integer(this.chillTimeSeconds).hashCode();
    return hash;
  }
}