/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */

package com.twitter.scrooge.test.gold.thriftjava;

import com.twitter.scrooge.Option;
import com.twitter.scrooge.Utilities;
import com.twitter.scrooge.ThriftStruct;
import com.twitter.scrooge.ThriftStructCodec;
import com.twitter.scrooge.ThriftStructCodec3;
import org.apache.thrift.protocol.*;
import java.nio.ByteBuffer;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;


@javax.annotation.Generated(value = "com.twitter.scrooge.Compiler")
public class Request implements ThriftStruct {
  private static final TStruct STRUCT = new TStruct("Request");
  private static final TField AListField = new TField("aList", TType.LIST, (short) 1);
  final List<String> aList;
  private static final TField ASetField = new TField("aSet", TType.SET, (short) 2);
  final Set<Integer> aSet;
  private static final TField AMapField = new TField("aMap", TType.MAP, (short) 3);
  final Map<Long, Long> aMap;

  public static class Builder {
    private List<String> _aList = Utilities.makeList();
    private Boolean _got_aList = false;

    public Builder aList(List<String> value) {
      this._aList = value;
      this._got_aList = true;
      return this;
    }

    public Builder unsetAList() {
      this._aList = Utilities.makeList();
      this._got_aList = false;
      return this;
    }
    private Set<Integer> _aSet = Utilities.makeSet();
    private Boolean _got_aSet = false;

    public Builder aSet(Set<Integer> value) {
      this._aSet = value;
      this._got_aSet = true;
      return this;
    }

    public Builder unsetASet() {
      this._aSet = Utilities.makeSet();
      this._got_aSet = false;
      return this;
    }
    private Map<Long, Long> _aMap = Utilities.makeMap();
    private Boolean _got_aMap = false;

    public Builder aMap(Map<Long, Long> value) {
      this._aMap = value;
      this._got_aMap = true;
      return this;
    }

    public Builder unsetAMap() {
      this._aMap = Utilities.makeMap();
      this._got_aMap = false;
      return this;
    }

    public Request build() {
      return new Request(
        this._aList,
        this._aSet,
        this._aMap    );
    }
  }

  public Builder copy() {
    Builder builder = new Builder();
    builder.aList(this.aList);
    builder.aSet(this.aSet);
    builder.aMap(this.aMap);
    return builder;
  }

  public static ThriftStructCodec<Request> CODEC = new ThriftStructCodec3<Request>() {
    @java.lang.Override
    public Request decode(TProtocol _iprot) throws org.apache.thrift.TException {
      Builder builder = new Builder();
      List<String> aList = Utilities.makeList();
      Set<Integer> aSet = Utilities.makeSet();
      Map<Long, Long> aMap = Utilities.makeMap();
      Boolean _done = false;
      _iprot.readStructBegin();
      while (!_done) {
        TField _field = _iprot.readFieldBegin();
        if (_field.type == TType.STOP) {
          _done = true;
        } else {
          switch (_field.id) {
            case 1: /* aList */
              switch (_field.type) {
                case TType.LIST:
                  List<String> aList_item;
                  TList _list_aList_item = _iprot.readListBegin();
                  aList_item = new ArrayList<String>();
                  int _i_aList_item = 0;
                  String aList_item_element;
                  while (_i_aList_item < _list_aList_item.size) {
                    aList_item_element = _iprot.readString();
                    aList_item.add(aList_item_element);
                    _i_aList_item += 1;
                  }
                  _iprot.readListEnd();
                  aList = aList_item;
                  break;
                default:
                  TProtocolUtil.skip(_iprot, _field.type);
              }
              builder.aList(aList);
              break;
            case 2: /* aSet */
              switch (_field.type) {
                case TType.SET:
                  Set<Integer> aSet_item;
                  TSet _set_aSet_item = _iprot.readSetBegin();
                  aSet_item = new HashSet<Integer>();
                  int _i_aSet_item = 0;
                  Integer aSet_item_element;
                  while (_i_aSet_item < _set_aSet_item.size) {
                    aSet_item_element = _iprot.readI32();
                    aSet_item.add(aSet_item_element);
                    _i_aSet_item += 1;
                  }
                  _iprot.readSetEnd();
                  aSet = aSet_item;
                  break;
                default:
                  TProtocolUtil.skip(_iprot, _field.type);
              }
              builder.aSet(aSet);
              break;
            case 3: /* aMap */
              switch (_field.type) {
                case TType.MAP:
                  Map<Long, Long> aMap_item;
                  TMap _map_aMap_item = _iprot.readMapBegin();
                  aMap_item = new HashMap<Long, Long>();
                  int _i_aMap_item = 0;
                    Long aMap_item_key;
                    Long aMap_item_value;

                  while (_i_aMap_item < _map_aMap_item.size) {
                    aMap_item_key = _iprot.readI64();
                    aMap_item_value = _iprot.readI64();
                    aMap_item.put(aMap_item_key, aMap_item_value);
                    _i_aMap_item += 1;
                  }
                  _iprot.readMapEnd();
                  aMap = aMap_item;
                  break;
                default:
                  TProtocolUtil.skip(_iprot, _field.type);
              }
              builder.aMap(aMap);
              break;
            default:
              TProtocolUtil.skip(_iprot, _field.type);
          }
          _iprot.readFieldEnd();
        }
      }
      _iprot.readStructEnd();
      try {
        return builder.build();
      } catch (IllegalStateException stateEx) {
        throw new TProtocolException(stateEx.getMessage());
      }
    }

    @java.lang.Override
    public void encode(Request struct, TProtocol oprot) throws org.apache.thrift.TException {
      struct.write(oprot);
    }
  };

  public static Request decode(TProtocol _iprot) throws org.apache.thrift.TException {
    return CODEC.decode(_iprot);
  }

  public static void encode(Request struct, TProtocol oprot) throws org.apache.thrift.TException {
    CODEC.encode(struct, oprot);
  }

  public Request(
    List<String> aList,
    Set<Integer> aSet,
    Map<Long, Long> aMap
  ) {
    this.aList = aList;
    this.aSet = aSet;
    this.aMap = aMap;
  }


  public List<String> getAList() {
    return this.aList;
  }
  public boolean isSetAList() {
    return this.aList != null;
  }
  public Set<Integer> getASet() {
    return this.aSet;
  }
  public boolean isSetASet() {
    return this.aSet != null;
  }
  public Map<Long, Long> getAMap() {
    return this.aMap;
  }
  public boolean isSetAMap() {
    return this.aMap != null;
  }

  public void write(TProtocol _oprot) throws org.apache.thrift.TException {
    validate();
    _oprot.writeStructBegin(STRUCT);
      _oprot.writeFieldBegin(AListField);
      List<String> aList_item = aList;
      _oprot.writeListBegin(new TList(TType.STRING, aList_item.size()));
      for (String aList_item_element : aList_item) {
        _oprot.writeString(aList_item_element);
      }
      _oprot.writeListEnd();
      _oprot.writeFieldEnd();
      _oprot.writeFieldBegin(ASetField);
      Set<Integer> aSet_item = aSet;
      _oprot.writeSetBegin(new TSet(TType.I32, aSet_item.size()));
      for (Integer aSet_item_element : aSet_item) {
        _oprot.writeI32(aSet_item_element);
      }
      _oprot.writeSetEnd();
      _oprot.writeFieldEnd();
      _oprot.writeFieldBegin(AMapField);
      Map<Long, Long> aMap_item = aMap;
      _oprot.writeMapBegin(new TMap(TType.I64, TType.I64, aMap_item.size()));
      for (Map.Entry<Long, Long> _aMap_item_entry : aMap_item.entrySet()) {
        Long aMap_item_key = _aMap_item_entry.getKey();
        _oprot.writeI64(aMap_item_key);
        Long aMap_item_value = _aMap_item_entry.getValue();
        _oprot.writeI64(aMap_item_value);
      }
      _oprot.writeMapEnd();
      _oprot.writeFieldEnd();
    _oprot.writeFieldStop();
    _oprot.writeStructEnd();
  }

  private void validate() throws org.apache.thrift.protocol.TProtocolException {
  }


  @java.lang.Override
  public boolean equals(Object other) {
    if (!(other instanceof Request)) return false;
    Request that = (Request) other;
    return
this.aList.equals(that.aList) &&
this.aSet.equals(that.aSet) &&
this.aMap.equals(that.aMap);
  }

  @java.lang.Override
  public String toString() {
    return "Request(" + this.aList + "," + this.aSet + "," + this.aMap + ")";
  }

  @java.lang.Override
  public int hashCode() {
    int hash = 1;
    hash = hash * (this.aList == null ? 0 : this.aList.hashCode());
    hash = hash * (this.aSet == null ? 0 : this.aSet.hashCode());
    hash = hash * (this.aMap == null ? 0 : this.aMap.hashCode());
    return hash;
  }
}