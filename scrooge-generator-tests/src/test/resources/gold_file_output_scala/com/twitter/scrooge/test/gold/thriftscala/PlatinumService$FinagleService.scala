/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scrooge.test.gold.thriftscala

import com.twitter.finagle.Thrift
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.scrooge.{ThriftStruct, TReusableMemoryTransport}
import com.twitter.util.{Future, Return, Throw, Throwables}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, HashMap => mutable$HashMap}
import scala.collection.{Map, Set}

import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class PlatinumService$FinagleService(
  iface: PlatinumService[Future],
  protocolFactory: TProtocolFactory,
  stats: StatsReceiver,
  maxThriftBufferSize: Int,
  serviceName: String
) extends GoldService$FinagleService(iface, protocolFactory, stats, maxThriftBufferSize) {
  import PlatinumService._

  def this(
    iface: PlatinumService[Future],
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver,
    maxThriftBufferSize: Int
  ) = this(iface, protocolFactory, stats, maxThriftBufferSize, "PlatinumService")

  def this(
    iface: PlatinumService[Future],
    protocolFactory: TProtocolFactory
  ) = this(iface, protocolFactory, NullStatsReceiver, Thrift.maxThriftBufferSize)
  private[this] val scopedStats = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_moreCoolThings {
    val RequestsCounter = scopedStats.scope("moreCoolThings").counter("requests")
    val SuccessCounter = scopedStats.scope("moreCoolThings").counter("success")
    val FailuresCounter = scopedStats.scope("moreCoolThings").counter("failures")
    val FailuresScope = scopedStats.scope("moreCoolThings").scope("failures")
  }
  addFunction("moreCoolThings", { (iprot: TProtocol, seqid: Int) =>
    try {
      __stats_moreCoolThings.RequestsCounter.incr()
      val args = MoreCoolThings.Args.decode(iprot)
      iprot.readMessageEnd()
      (try {
        iface.moreCoolThings(args.request)
      } catch {
        case e: Exception => Future.exception(e)
      }).flatMap { value: Int =>
        reply("moreCoolThings", seqid, MoreCoolThings.Result(success = Some(value)))
      }.rescue {
        case e: com.twitter.scrooge.test.gold.thriftscala.AnotherException => {
          reply("moreCoolThings", seqid, MoreCoolThings.Result(ax = Some(e)))
        }
        case e: com.twitter.scrooge.test.gold.thriftscala.OverCapacityException => {
          reply("moreCoolThings", seqid, MoreCoolThings.Result(oce = Some(e)))
        }
        case e => Future.exception(e)
      }.respond {
        case Return(_) =>
          __stats_moreCoolThings.SuccessCounter.incr()
        case Throw(ex) =>
          __stats_moreCoolThings.FailuresCounter.incr()
          __stats_moreCoolThings.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
      }
    } catch {
      case e: TProtocolException => {
        iprot.readMessageEnd()
        exception("moreCoolThings", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage)
      }
      case e: Exception => Future.exception(e)
    }
  })
}