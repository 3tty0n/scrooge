/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.scrooge.test.gold.thriftjava;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class CollectionId implements TBase<CollectionId, CollectionId._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CollectionId");

  private static final TField COLLECTION_ID_FIELD_DESC = new TField("collectionId", TType.STRUCT, (short)1);


  public CollectionId collectionId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    COLLECTION_ID((short)1, "collectionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_ID
  	return COLLECTION_ID;
        default:
  	return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_ID, new FieldMetaData("collectionId", TFieldRequirementType.REQUIRED,
      new StructMetaData(TType.STRUCT, CollectionId.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CollectionId.class, metaDataMap);
  }


  public CollectionId() {
  }

  public CollectionId(
    CollectionId collectionId)
  {
    this();
    this.collectionId = collectionId;
  }


  public CollectionId deepCopy() {
    return new CollectionId(this);
  }

  @java.lang.Override
  public void clear() {
    this.collectionId = null;
  }

  public CollectionId getCollectionId() {
    return this.collectionId;
  }

  public CollectionId setCollectionId(CollectionId collectionId) {
    this.collectionId = collectionId;

    return this;
  }

  public void unsetCollectionId() {
    this.collectionId = null;
  }

  /** Returns true if field collectionId is set (has been asigned a value) and false otherwise */
  public boolean isSetCollectionId() {
    return this.collectionId != null;
  }

  public void setCollectionIdIsSet(boolean value) {
    if (!value) {
      this.collectionId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_ID:
      if (value == null) {
        unsetCollectionId();
      } else {
        setCollectionId((CollectionId)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_ID:
      return getCollectionId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_ID:
      return isSetCollectionId();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionId)
      return this.equals((CollectionId)that);
    return false;
  }

  public boolean equals(CollectionId that) {
    if (that == null)
      return false;
    boolean this_present_collectionId = true && this.isSetCollectionId();
    boolean that_present_collectionId = true && that.isSetCollectionId();
    if (this_present_collectionId || that_present_collectionId) {
      if (!(this_present_collectionId && that_present_collectionId))
        return false;
      if (!this.collectionId.equals(that.collectionId))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_collectionId = true && (isSetCollectionId());
    builder.append(present_collectionId);
    if (present_collectionId)
      builder.append(collectionId);
    return builder.toHashCode();
  }

  public int compareTo(CollectionId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CollectionId typedOther = (CollectionId)other;

    lastComparison = Boolean.valueOf(isSetCollectionId()).compareTo(typedOther.isSetCollectionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionId()) {
      lastComparison = TBaseHelper.compareTo(this.collectionId, typedOther.collectionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // COLLECTION_ID
          if (field.type == TType.STRUCT) {
            this.collectionId = new CollectionId();
            this.collectionId.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.collectionId != null) {
      oprot.writeFieldBegin(COLLECTION_ID_FIELD_DESC);
      this.collectionId.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionId(");
    boolean first = true;
    sb.append("collectionId:");
    if (this.collectionId == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (collectionId == null) {
      throw new TProtocolException("Required field 'collectionId' was not present! Struct: " + toString());
    }
  }
}

